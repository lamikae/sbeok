#!/usr/bin/env bash
: '
Checks whether the audio data length of a wav file is an exact
multiple of audio CD sector length. Unless so, silence will be padded
onto the end of the track, causing unwanted clicks during playback
at track transition, if the audio does not fade out between tracks.

A single audio sector is 2352 bytes.
(16 bits * 44100 1/sec * 2 channels * 1/75 sec * 1/8 bytes/bit).
File audio length is appropriate for Red Book audio CD when 
audio data length divided by sector size is zero.

Copyright (C) 2011  Mikael Lammentausta

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
'

VERSION='1.0.2'
debug=0

# The input arguments may be given directly, as a specific shell-escaped
# filename, or as "*.wav" which will be expanded by the shell, and 
# spaces in filenames will not be escaped.
# 
# Modify IFS (temporarily) to handle these use cases.
_IFS=$IFS
IFS=$(echo -en "\n\b")

# trap certain exit values to onexit()
trap onexit 2 3 15

#--- onexit() -----------------------------------------------------
#  @param $1 integer  (optional) Exit status.  If not set, use `$?'
function onexit() {
	local exit_status=${1:-$?}
	# restore IFS
	IFS=_IFS
	[[ $debug == 1 ]] && echo Exiting $0 with $exit_status
	exit $exit_status
}
function die {
	echo "ERROR: $1"
	onexit 1
}
function usage {
	cat << __USAGE
SBEOK $VERSION
Checks whether audio wav track aligns on CD sector boundaries.

USAGE
	sbeok [wav file(s) ...]

When burning an audio CD where the audio is continuous over a track change,
you need to ensure the proper length of each track to create a quality disc.

On audio cd, tracks begin at full sectors. The Red Book audio cd specification
defines a sector length of 1/75 sec, which equals to 2352 bytes.

If the audio data does not align on the sector boundary, zero bytes will be
inserted instead. This is enough to cause an annoying click in some cd players.

__USAGE
}

[[ -n $* ]] || (usage; echo; die "no input file(s)")

for filename in ${@}; do

	echo -n "${filename}: "
	
	# check that this is RIFF wave file
	if [ -z $(file ${filename} | grep RIFF | grep WAVE) ]; then
		echo "not a RIFF wave file"
		continue
	fi

	filesize=$(stat -f "%z" "${filename}")
	if [ -z $filesize ]; then
		echo "ERROR"
		continue
	fi
	# canonical wav file header is 44 bytes
	track_length=$(expr $filesize - 44)

	remainder=$(expr $track_length % 2352)
	if [ $remainder == 0 ]; then
		echo "OK"
	else
		missing_bytes=$(expr 2352 - $remainder)
		echo "FAILED, missing $missing_bytes bytes"
	fi

	if [ $debug == 1 ]; then
		echo "Length: ${track_length}"
		echo "Remainder: $remainder"
	fi

done

onexit 0
